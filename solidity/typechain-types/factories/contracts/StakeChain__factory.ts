/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  StakeChain,
  StakeChainInterface,
} from "../../contracts/StakeChain";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isStake",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalStaked",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalUserStake",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "previous",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "current",
        type: "bytes32",
      },
    ],
    name: "StakeChainExtended",
    type: "event",
  },
  {
    inputs: [],
    name: "NULL_HASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakeChain",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "stakeSnapshot",
    outputs: [
      {
        internalType: "uint256",
        name: "totalStake",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "stakeChainSnapshot",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "currentStakeChain",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakes",
    outputs: [
      {
        internalType: "uint256",
        name: "totalStake",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "stakeChainSnapshot",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000801b60025534801561001757600080fd5b50604051610c12380380610c12833981810160405281019061003991906100e3565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610110565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100b082610085565b9050919050565b6100c0816100a5565b81146100cb57600080fd5b50565b6000815190506100dd816100b7565b92915050565b6000602082840312156100f9576100f8610080565b5b6000610107848285016100ce565b91505092915050565b610af38061011f6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063817b1cd21161005b578063817b1cd214610116578063a694fc3a14610134578063d6dc4edc14610150578063f08b4b1f1461016e57610088565b806316934fc41461008d5780632e17de78146100be578063609c320f146100da57806372f702f3146100f8575b600080fd5b6100a760048036038101906100a291906106d1565b6101a0565b6040516100b5929190610730565b60405180910390f35b6100d860048036038101906100d39190610785565b6101c4565b005b6100e26103b0565b6040516100ef91906107b2565b60405180910390f35b6101006103b6565b60405161010d91906107dc565b60405180910390f35b61011e6103dc565b60405161012b91906107f7565b60405180910390f35b61014e60048036038101906101499190610785565b6103e2565b005b6101586105cc565b60405161016591906107b2565b60405180910390f35b610188600480360381019061018391906106d1565b6105d3565b60405161019793929190610812565b60405180910390f35b60036020528060005260406000206000915090508060000154908060010154905082565b806000808282546101d59190610878565b9250508190555080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461022e9190610878565b92505081905550600033600083600054600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001544260025460405160200161029b979695949392919061098a565b6040516020818303038152906040529050600060025490508180519060200120600281905550600254600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055503373ffffffffffffffffffffffffffffffffffffffff167f3e6fb91dfce79aedde243d997289a900d0d5aa11cc39a8cb7be2129103faf032600085600054600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015442876002546040516103a39796959493929190610a1a565b60405180910390a2505050565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b806000808282546103f39190610a89565b9250508190555080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461044c9190610a89565b92505081905550600033600183600054600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154426002546040516020016104b9979695949392919061098a565b60405160208183030381529060405290506000818051906020012090503373ffffffffffffffffffffffffffffffffffffffff167f3e6fb91dfce79aedde243d997289a900d0d5aa11cc39a8cb7be2129103faf032600185600054600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154426002548860405161056f9796959493929190610a1a565b60405180910390a280600281905550600254600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505050565b6000801b81565b6000806000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546002549250925092509193909250565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061069e82610673565b9050919050565b6106ae81610693565b81146106b957600080fd5b50565b6000813590506106cb816106a5565b92915050565b6000602082840312156106e7576106e661066e565b5b60006106f5848285016106bc565b91505092915050565b6000819050919050565b610711816106fe565b82525050565b6000819050919050565b61072a81610717565b82525050565b60006040820190506107456000830185610708565b6107526020830184610721565b9392505050565b610762816106fe565b811461076d57600080fd5b50565b60008135905061077f81610759565b92915050565b60006020828403121561079b5761079a61066e565b5b60006107a984828501610770565b91505092915050565b60006020820190506107c76000830184610721565b92915050565b6107d681610693565b82525050565b60006020820190506107f160008301846107cd565b92915050565b600060208201905061080c6000830184610708565b92915050565b60006060820190506108276000830186610708565b6108346020830185610721565b6108416040830184610721565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610883826106fe565b915061088e836106fe565b92508282039050818111156108a6576108a5610849565b5b92915050565b60008160601b9050919050565b60006108c4826108ac565b9050919050565b60006108d6826108b9565b9050919050565b6108ee6108e982610693565b6108cb565b82525050565b60008115159050919050565b60008160f81b9050919050565b600061091882610900565b9050919050565b600061092a8261090d565b9050919050565b61094261093d826108f4565b61091f565b82525050565b6000819050919050565b61096361095e826106fe565b610948565b82525050565b6000819050919050565b61098461097f82610717565b610969565b82525050565b6000610996828a6108dd565b6014820191506109a68289610931565b6001820191506109b68288610952565b6020820191506109c68287610952565b6020820191506109d68286610952565b6020820191506109e68285610952565b6020820191506109f68284610973565b60208201915081905098975050505050505050565b610a14816108f4565b82525050565b600060e082019050610a2f600083018a610a0b565b610a3c6020830189610708565b610a496040830188610708565b610a566060830187610708565b610a636080830186610708565b610a7060a0830185610721565b610a7d60c0830184610721565b98975050505050505050565b6000610a94826106fe565b9150610a9f836106fe565b9250828201905080821115610ab757610ab6610849565b5b9291505056fea26469706673582212203206284a25fad9a586c82cc0a334c8bf7a9f7e8d45b30844318f045447463f2764736f6c63430008180033";

type StakeChainConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeChainConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakeChain__factory extends ContractFactory {
  constructor(...args: StakeChainConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _stakingToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_stakingToken, overrides || {});
  }
  override deploy(
    _stakingToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_stakingToken, overrides || {}) as Promise<
      StakeChain & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): StakeChain__factory {
    return super.connect(runner) as StakeChain__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeChainInterface {
    return new Interface(_abi) as StakeChainInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): StakeChain {
    return new Contract(address, _abi, runner) as unknown as StakeChain;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace RewardChain {
  export type HashIntervalStruct = { start: BytesLike; end: BytesLike };

  export type HashIntervalStructOutput = [start: string, end: string] & {
    start: string;
    end: string;
  };
}

export interface RewardChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NULL_HASH"
      | "addRewards"
      | "beginningOfStakeChain"
      | "claimRewards"
      | "currentRewardChain"
      | "relay"
      | "rewardBeginTime"
      | "rewards"
      | "totalRewards"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RewardsAdded"): EventFragment;

  encodeFunctionData(functionFragment: "NULL_HASH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beginningOfStakeChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRewardChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relay",
    values: [AddressLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBeginTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NULL_HASH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beginningOfStakeChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRewardChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardBeginTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRewards",
    data: BytesLike
  ): Result;
}

export namespace RewardsAddedEvent {
  export type InputTuple = [
    amount: BigNumberish,
    totalRewards: BigNumberish,
    timestamp: BigNumberish,
    previousRewardChain: BytesLike,
    currentRewardChain: BytesLike
  ];
  export type OutputTuple = [
    amount: bigint,
    totalRewards: bigint,
    timestamp: bigint,
    previousRewardChain: string,
    currentRewardChain: string
  ];
  export interface OutputObject {
    amount: bigint;
    totalRewards: bigint;
    timestamp: bigint;
    previousRewardChain: string;
    currentRewardChain: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardChain extends BaseContract {
  connect(runner?: ContractRunner | null): RewardChain;
  waitForDeployment(): Promise<this>;

  interface: RewardChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NULL_HASH: TypedContractMethod<[], [string], "view">;

  addRewards: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  beginningOfStakeChain: TypedContractMethod<[], [string], "view">;

  claimRewards: TypedContractMethod<
    [
      aggregateRewards: BigNumberish,
      totalUserStake: BigNumberish,
      totalStake: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  currentRewardChain: TypedContractMethod<[], [string], "view">;

  relay: TypedContractMethod<
    [
      user: AddressLike,
      userStakeChainSnapshot: BytesLike,
      currentStakeChainSnapshot: BytesLike,
      stakeSnapshotTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  rewardBeginTime: TypedContractMethod<[], [bigint], "view">;

  rewards: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        RewardChain.HashIntervalStructOutput,
        RewardChain.HashIntervalStructOutput,
        RewardChain.HashIntervalStructOutput,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        stakeInterval: RewardChain.HashIntervalStructOutput;
        rewardInterval: RewardChain.HashIntervalStructOutput;
        userStakeInterval: RewardChain.HashIntervalStructOutput;
        rewardSnapshotTime: bigint;
        stakeSnapshotTime: bigint;
        rewardBeginTime: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  totalRewards: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NULL_HASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addRewards"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "beginningOfStakeChain"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [
      aggregateRewards: BigNumberish,
      totalUserStake: BigNumberish,
      totalStake: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentRewardChain"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relay"
  ): TypedContractMethod<
    [
      user: AddressLike,
      userStakeChainSnapshot: BytesLike,
      currentStakeChainSnapshot: BytesLike,
      stakeSnapshotTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardBeginTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        RewardChain.HashIntervalStructOutput,
        RewardChain.HashIntervalStructOutput,
        RewardChain.HashIntervalStructOutput,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        stakeInterval: RewardChain.HashIntervalStructOutput;
        rewardInterval: RewardChain.HashIntervalStructOutput;
        userStakeInterval: RewardChain.HashIntervalStructOutput;
        rewardSnapshotTime: bigint;
        stakeSnapshotTime: bigint;
        rewardBeginTime: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalRewards"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "RewardsAdded"
  ): TypedContractEvent<
    RewardsAddedEvent.InputTuple,
    RewardsAddedEvent.OutputTuple,
    RewardsAddedEvent.OutputObject
  >;

  filters: {
    "RewardsAdded(uint256,uint256,uint256,bytes32,bytes32)": TypedContractEvent<
      RewardsAddedEvent.InputTuple,
      RewardsAddedEvent.OutputTuple,
      RewardsAddedEvent.OutputObject
    >;
    RewardsAdded: TypedContractEvent<
      RewardsAddedEvent.InputTuple,
      RewardsAddedEvent.OutputTuple,
      RewardsAddedEvent.OutputObject
    >;
  };
}

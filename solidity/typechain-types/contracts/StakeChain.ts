/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface StakeChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NULL_HASH"
      | "stake"
      | "stakeChain"
      | "stakeSnapshot"
      | "stakes"
      | "stakingToken"
      | "totalStaked"
      | "unstake"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "StakeChainExtended"): EventFragment;

  encodeFunctionData(functionFragment: "NULL_HASH", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeSnapshot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "NULL_HASH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeChain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
}

export namespace StakeChainExtendedEvent {
  export type InputTuple = [
    user: AddressLike,
    isStake: boolean,
    amount: BigNumberish,
    totalStaked: BigNumberish,
    totalUserStake: BigNumberish,
    timestamp: BigNumberish,
    previous: BytesLike,
    current: BytesLike
  ];
  export type OutputTuple = [
    user: string,
    isStake: boolean,
    amount: bigint,
    totalStaked: bigint,
    totalUserStake: bigint,
    timestamp: bigint,
    previous: string,
    current: string
  ];
  export interface OutputObject {
    user: string;
    isStake: boolean;
    amount: bigint;
    totalStaked: bigint;
    totalUserStake: bigint;
    timestamp: bigint;
    previous: string;
    current: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakeChain extends BaseContract {
  connect(runner?: ContractRunner | null): StakeChain;
  waitForDeployment(): Promise<this>;

  interface: StakeChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NULL_HASH: TypedContractMethod<[], [string], "view">;

  stake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  stakeChain: TypedContractMethod<[], [string], "view">;

  stakeSnapshot: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, string, string] & {
        totalStake: bigint;
        stakeChainSnapshot: string;
        currentStakeChain: string;
      }
    ],
    "view"
  >;

  stakes: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, string] & { totalStake: bigint; stakeChainSnapshot: string }],
    "view"
  >;

  stakingToken: TypedContractMethod<[], [string], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  unstake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NULL_HASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeChain"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakeSnapshot"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, string, string] & {
        totalStake: bigint;
        stakeChainSnapshot: string;
        currentStakeChain: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, string] & { totalStake: bigint; stakeChainSnapshot: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "StakeChainExtended"
  ): TypedContractEvent<
    StakeChainExtendedEvent.InputTuple,
    StakeChainExtendedEvent.OutputTuple,
    StakeChainExtendedEvent.OutputObject
  >;

  filters: {
    "StakeChainExtended(address,bool,uint256,uint256,uint256,uint256,bytes32,bytes32)": TypedContractEvent<
      StakeChainExtendedEvent.InputTuple,
      StakeChainExtendedEvent.OutputTuple,
      StakeChainExtendedEvent.OutputObject
    >;
    StakeChainExtended: TypedContractEvent<
      StakeChainExtendedEvent.InputTuple,
      StakeChainExtendedEvent.OutputTuple,
      StakeChainExtendedEvent.OutputObject
    >;
  };
}
